###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401,F821
# flake8: noqa: E501,F401,F821
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient Default {\n  provider openai\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.80.2\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "process_categoizer.baml": "\n\nclass CategorizedProcess {\n    process_id string\n    process_name string\n    unique_activities string[]\n    category string\n}\n\n\nfunction CategorizeProcess(activities: string[], model_name: string, categories: string[], process_id: string) -> CategorizedProcess {\n     client Default\n     prompt #\"\n        {{_.role(\"system\")}}\n        You are an expert in categorizing processes. \n        Your task is to accept a list containing activity labels such as \"create purchase order\" and a process name such as \"procurement\" \n        as input and provide the best category for the given process from the list provided below. If no category fits, return \"Other\".\n        Note: the process name is often not very informative, so you should rather focus on the activities.\n        The categories are: \n        {{categories}} \n\n        {{ctx.output_format}}\n\n        {{_.role(\"user\")}}\n\n        This is the list of activitiy labels\n         <labels>{{activities}}</labels>\n\n        This is the process name\n         <process_name>{{model_name}}</process_name>\n\n         This is the process id to include in the output for tracking purposes\n         <process_id>{{process_id}}</process_id>\n\n\n        {{_.role(\"assistant\")}}\n        JSON:\n    \"#\n}\n\n\ntest process_categorization{\n    functions [CategorizeProcess]\n    args { \n        activities [\"Receive invoice\", \"Receive materials\", \"Pay the invoice\", \"Send Purchase order\", \"Create Purchase order\"]\n        model_name \"Procurement\"\n        process_id \"1234\"\n        categories [\"Develop and Manage Products and Services\",\n        \"Develop and Manage Human Capital\",\n        \"Develop Vision and Strategy\",\n        \"Market and Sell Products and Services\",\n        \"Deliver Physical Products\",\n        \"Deliver Services\",\n        \"Manage Customer Service\",\n        \"Manage Information Technology\",\n        \"Managee Financial Resources\",\n        \"Acquire, Construct, and Manage Assets\",\n        \"Manage Enterprise Risk, Compliance, Remediation, and Resiliency\",\n        \"Manage External Relationships\",\n        \"Develop and Manage Business Capabilities\"]\n        }\n}\n\n",
    "tagger.baml": "class ObjectActionPair{\n    object string\n    action string\n}\n\nclass PairsFromLabel{\n    original_label string\n    object_action_pairs ObjectActionPair[]\n}\n\nclass ExtractedPairs {\n    pairs_from_label PairsFromLabel[]\n}\n\n\nfunction ExtractObjectActionPairs(labels: string[]) -> ExtractedPairs {\n    client Default\n    prompt #\"\n        {{_.role(\"system\")}}\n        You are an expert activity label tagger system. \n        Your task is to accept a list containing activity labels such as 'create purchase order' as input and provide a list of pairs, where each pair consists of the main action and the object it is applied on. \n        For 'create purchase order', you would return extract 'create' as the action and 'purchase order' as the object. \n        If actions are not provided as verbs, change them into verbs, e.g., for 'purchase order creation' you would hence return ('create', 'purchase order') as well. \n        Also turn past tense actions into present tense ones, e.g., 'purchase order created' becomes ('create', 'purchase order') too. \n        If multiple actions are applied to the same object, split this into multiple pairs, e.g., 'create and send purchase order' becomes ('create', 'purchase order'), ('send', 'purchase oder')\n        If there is additional information, e.g., about who is performing the action or about an IT system that is involved, discard that. \n        If there are any special characters, just replace them with whitespace and turn objects ans actions to all lower case characters. \n\n        {{ctx.output_format}}\n\n        {{_.role(\"user\")}}\n\n        This is the list of activitiy labels\n         <labels>{{labels}}</labels>\n\n\n        {{_.role(\"assistant\")}}\n        JSON:\n    \"#\n}\n\n\ntest label_extraction {\n  functions [ExtractObjectActionPairs]\n  args {\n    labels [\"Wellcome Customers\",\n    \"Check if customer is new or existing?\",\n    \"Contacts the patient\",\n    \"Collect medication\",\n    \"Business Model Definition\",\n    \"Step 1C\",\n    \"basic ingredients not accessible\",\n    \"Submit finalised mockup to Liquid Assembly\",\n    \"Write Settlement Recommendation\",\n    \"Notification\"]\n    \n  }\n}",
}

def get_baml_files():
    return file_map